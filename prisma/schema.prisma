// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"

}

model Food {
  id                             Int              @id @default(autoincrement())
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
  dataSource                     String
  description                    String?
  additionalDescriptions         String[]
  category                       String?
  brandOwner                     String?
  brandName                      String?
  subbrandName                   String?
  gtinUpc                        String?
  subIngredients                 String?
  notASignificantSourceOf        String?
  servingSize                    Float?
  servingSizeUnit                ServingSizeUnit?
  servingSizeDescription         String?
  commonNames                    String?
  barcode                        String?
  doi                            String?
  historical                     Boolean          @default(false)
  proteinCalorieConversionFactor Float?
  fatCalorieConversionFactor     Float?
  carbohydrateConversionFactor   Float?
  fdcDataSource                  String?
  fdcModifiedDate                DateTime?
  fdcAvailableDate               DateTime?
  nutrientCount                  Int?
  inElasticsearch                Boolean          @default(false)
  foodNutrients                  FoodNutrient[]
  portions                       Portion[]

  ingredients Ingredient[]

  @@index([description])
  @@index([gtinUpc])
}

model Portion {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  food               Food     @relation(fields: [foodId], references: [id])
  foodId             Int
  sequenceNumber     Int      @default(1)
  measureUnit        String
  portionDescription String?
  modifier           String?
  gramWeight         Float
  amount             Float

  @@index([foodId])
}

model Nutrient {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String
  nutrientNumber Int
  unit           NutrientUnit
  foodNutrients  FoodNutrient[]
}

model FoodNutrient {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  food       Food     @relation(fields: [foodId], references: [id])
  foodId     Int
  nutrient   Nutrient @relation(fields: [nutrientId], references: [id])
  nutrientId Int

  amount Float

  @@index([foodId])
  @@index([nutrientId])
}

model Plan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  name      String
  startDate DateTime
  endDate   DateTime

  meals       Meal[]
  ingredients Ingredient[]

  @@index([userId])
}

model Meal {
  // Derive 'modified' state by comparing to recipe
  // When updating a recipe, non-modified meals should stay synced with recipe
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servings Int
  order    Int

  plan   Plan @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId Int

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  ingredients Ingredient[]
}

model Recipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  name     String
  servings Int

  ingredients Ingredient[]
  meals       Meal[]
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount  Float
  measure String
  order   Int

  food   Food @relation(fields: [foodId], references: [id])
  foodId Int

  // Belongs to a Plan OR Meal OR Recipe
  plan   Plan? @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId Int?

  meal   Meal? @relation(fields: [mealId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  mealId Int?

  recipe   Recipe? @relation(fields: [recipeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  recipeId Int?
}

enum ServingSizeUnit {
  g
  ml
}

enum NutrientUnit {
  G
  KCAL
  MG
  kJ
  SP_GR
  UG
  IU
  MG_ATE
  PH
  MCG_RE
  UMOL_TE
  MG_GAE
}
