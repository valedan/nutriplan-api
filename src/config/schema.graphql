### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddIngredientInput {
  foodId: Int!
  planId: Int
  recipeId: Int
}

input AddMealInput {
  planId: Int!
  recipeId: Int!
}

input CreatePlanInput {
  endDate: DateTime!
  name: String!
  startDate: DateTime!
}

input CreateRecipeInput {
  name: String!
  servings: Int!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Food {
  brandName: String
  category: String
  dataSource: String!
  description: String!
  foodNutrients(nutrientIds: [Int!]): [FoodNutrient!]!
  id: Int!
  nutrientCount: Int!
  portions: [Portion!]!
  searchScore: Float
}

type FoodNutrient {
  amount: Float!
  id: Int!
  nutrient: Nutrient!
}

type Ingredient {
  amount: Float!
  food: Food!
  id: Int!
  measure: String!
  order: Int!
}

enum IngredientParent {
  plan
  recipe
}

input IngredientReorder {
  id: Int!
  newOrder: Int!
}

type Meal {
  id: Int!
  ingredients: [Ingredient!]!
  order: Int!
  plan: Plan
  recipe: Recipe
  servings: Int!
}

input MealReorder {
  id: Int!
  newOrder: Int!
}

type Mutation {
  addIngredient(input: AddIngredientInput!): Ingredient
  addMeal(input: AddMealInput!): Meal
  createPlan(input: CreatePlanInput!): Plan
  createRecipe(input: CreateRecipeInput!): Recipe
  deletePlan(id: Int!): Plan
  deleteRecipe(id: Int!): Recipe
  removeIngredient(id: Int!): Ingredient
  removeMeal(id: Int!): Meal
  reorderIngredients(input: ReorderIngredientsInput!): [Ingredient]
  updateIngredient(input: UpdateIngredientInput!): Ingredient
  updateMeal(input: UpdateMealInput!): Meal
  updatePlan(input: UpdatePlanInput!): Plan
  updateRecipe(input: UpdateRecipeInput!): Recipe
  updateTarget(input: UpdateTargetInput!): NutrientTarget
}

type Nutrient {
  activeTarget: NutrientTarget
  displayName: String
  id: Int!
  name: String!
  order: Int
  unit: String!
}

type NutrientGroup {
  id: Int!
  name: String!
  nutrients: [Nutrient!]!
  order: Int!
}

type NutrientProfile {
  createdAt: DateTime!
  id: Int!
  isActive: Boolean!
  name: String!
  nutrientTargets: [NutrientTarget!]!
  updatedAt: DateTime!
}

type NutrientTarget {
  createdAt: DateTime!
  id: Int!
  max: Float
  min: Float
  nutrient: Nutrient!
  updatedAt: DateTime!
}

type Plan {
  createdAt: DateTime!
  endDate: DateTime!
  id: Int!
  ingredients: [Ingredient!]!
  meals: [Meal!]!
  name: String
  startDate: DateTime!
  updatedAt: DateTime!
}

type Portion {
  gramWeight: Float!
  measure: String!
}

type Query {
  activeNutrientProfile: NutrientProfile!
  food(id: Int!): Food
  foods(ids: [Int!]!): [Food!]!
  nutrient(id: Int!): Nutrient
  nutrientGroups: [NutrientGroup!]!
  nutrients(ids: [Int!]): [Nutrient!]!
  plan(id: Int!): Plan
  plans: [Plan!]!
  recipe(id: Int!): Recipe
  recipes: [Recipe!]!
  searchFoods(searchTerm: String!): [Food]
}

type Recipe {
  createdAt: DateTime!
  id: Int!
  ingredients: [Ingredient!]!
  meals: [Meal!]!
  name: String
  servings: Int
  updatedAt: DateTime!
}

input ReorderIngredientsInput {
  parentId: Int!
  parentType: IngredientParent!
  reorders: [IngredientReorder!]!
}

input ReorderMealsInput {
  parentId: Int!
  reorders: [MealReorder!]!
}

type ServingSize {
  amount: Float!
  description: String!
  unit: ServingSizeUnit!
}

enum ServingSizeUnit {
  g
  ml
}

input UpdateIngredientInput {
  amount: Float
  id: Int!
  measure: String
}

input UpdateMealInput {
  id: Int!
  servings: Int
}

input UpdatePlanInput {
  endDate: DateTime
  id: Int!
  name: String
  startDate: DateTime
}

input UpdateRecipeInput {
  id: Int!
  name: String
  servings: Int
}

input UpdateTargetInput {
  id: Int!
  max: Float
  min: Float
}
