/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Food: { // root type
    brand?: string | null; // String
    category?: string | null; // String
    data_source?: string | null; // String
    description?: string | null; // String
    food_nutrients?: Array<NexusGenRootTypes['FoodNutrient'] | null> | null; // [FoodNutrient]
    id?: number | null; // Int
    ingredients?: string | null; // String
    portions?: Array<NexusGenRootTypes['Portion'] | null> | null; // [Portion]
    searchScore?: number | null; // Float
    serving_size?: number | null; // Float
  }
  FoodNutrient: { // root type
    id?: number | null; // Int
    nutrient?: NexusGenRootTypes['Nutrient'] | null; // Nutrient
  }
  Nutrient: { // root type
    id?: number | null; // Int
    name?: string | null; // String
  }
  Portion: { // root type
    gram_weight?: number | null; // Float
    id?: number | null; // Int
    measure?: string | null; // String
    sequence_number?: number | null; // Int
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Food: { // field return type
    brand: string | null; // String
    category: string | null; // String
    data_source: string | null; // String
    description: string | null; // String
    food_nutrients: Array<NexusGenRootTypes['FoodNutrient'] | null> | null; // [FoodNutrient]
    id: number | null; // Int
    ingredients: string | null; // String
    portions: Array<NexusGenRootTypes['Portion'] | null> | null; // [Portion]
    searchScore: number | null; // Float
    serving_size: number | null; // Float
  }
  FoodNutrient: { // field return type
    id: number | null; // Int
    nutrient: NexusGenRootTypes['Nutrient'] | null; // Nutrient
  }
  Nutrient: { // field return type
    id: number | null; // Int
    name: string | null; // String
  }
  Portion: { // field return type
    gram_weight: number | null; // Float
    id: number | null; // Int
    measure: string | null; // String
    sequence_number: number | null; // Int
  }
  Query: { // field return type
    food: NexusGenRootTypes['Food'] | null; // Food
    searchFoods: Array<NexusGenRootTypes['Food'] | null> | null; // [Food]
  }
}

export interface NexusGenFieldTypeNames {
  Food: { // field return type name
    brand: 'String'
    category: 'String'
    data_source: 'String'
    description: 'String'
    food_nutrients: 'FoodNutrient'
    id: 'Int'
    ingredients: 'String'
    portions: 'Portion'
    searchScore: 'Float'
    serving_size: 'Float'
  }
  FoodNutrient: { // field return type name
    id: 'Int'
    nutrient: 'Nutrient'
  }
  Nutrient: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Portion: { // field return type name
    gram_weight: 'Float'
    id: 'Int'
    measure: 'String'
    sequence_number: 'Int'
  }
  Query: { // field return type name
    food: 'Food'
    searchFoods: 'Food'
  }
}

export interface NexusGenArgTypes {
  Query: {
    food: { // args
      id: number; // Int!
    }
    searchFoods: { // args
      searchTerm: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}